@model CurrencyConverter.Models.CurrencyConvert

@{
    ViewData["Title"] = "Currency Converter";

    var historicalRates = ViewBag.HistoricalRates as Dictionary<string, decimal>;
    var favorites = ViewBag.Favorites as List<CurrencyConverter.Models.FavoriteCurrencyPair>;
}

<h2 class="text-center">@ViewData["Title"]</h2>
<div class="container">
    <div class="row">       
           <div class="col-md-4 d-flex justify-content-center">
             @if (User.Identity.IsAuthenticated)
             {
                <section class="bg-custom-light p-4 rounded-custom shadow-custom">
                    <h3>Historical Exchange Rates</h3>
                    <form id="historicalRatesForm" method="get" class="needs-validation" novalidate>
                        <div class="form-group">
                            <label for="HistoricalDate">Select Date</label>
                            <input type="date" id="HistoricalDate" name="HistoricalDate" class="form-control" required />
                            <div class="invalid-feedback">Please select a valid date.</div>
                        </div>
                        <button type="submit" class="btn btn-primary">Get Rates</button>
                    </form>
                    <ul class="list-group mt-3 scrollable-list" id="historicalRatesList">
                        @if (historicalRates != null && historicalRates.Count > 0)
                        {
                            @foreach (var rate in historicalRates)
                            {
                                <li class="list-group-item d-flex justify-content-between align-items-center">
                                    @rate.Key - @rate.Value
                                </li>
                            }
                        }
                    </ul>
                </section>
             } 
           </div>
       
        <div class="col-md-4 d-flex justify-content-center">
            <section class="bg-custom-light p-4 rounded-custom shadow-custom">
                <form id="currencyConverterForm" method="post" class="needs-validation" novalidate>
                    <div class="form-group">
                        <label for="BaseCurrency">Base Currency</label>
                        <select id="BaseCurrency" name="BaseCurrency" class="form-control">
                            @foreach (var currency in ViewBag.Currencies as Dictionary<string, string>)
                            {
                                <option value="@currency.Key">@currency.Value (@currency.Key)</option>
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="TargetCurrency">Target Currency</label>
                        <select id="TargetCurrency" name="TargetCurrency" class="form-control">
                            @foreach (var currency in ViewBag.Currencies as Dictionary<string, string>)
                            {
                                <option value="@currency.Key">@currency.Value (@currency.Key)</option>
                            }
                            }
                        </select>
                    </div>

                    <div class="form-group">
                        <label for="Amount">Amount</label>
                        <input type="number" id="Amount" name="Amount" class="form-control" value="@Model.Amount" min="0.1" step="0.01" max="100000000000000" required />
                        <div class="invalid-feedback">Please enter a valid amount greater than 0 or less than 100000000000000.</div>
                    </div>

                    <div class="form-group" id="convertedamountdiv">
                        <label for="ConvertedAmount">Converted Amount</label>
                        <input type="text" id="ConvertedAmount" class="form-control" readonly value="@Model.ConvertedAmount" />
                    </div>
                   @if (User.Identity.IsAuthenticated)
                   {
                    <div class="form-check">
                        <input type="hidden" id="SaveFavoriteHidden" name="SaveFavorite" value="false" />
                        <input type="checkbox" id="SaveFavorite" name="SaveFavorite" class="form-check-input" />
                        <label for="SaveFavorite" class="form-check-label">Save as Favorite</label>
                    </div>
                   }
                    <div id="favoriteErrorMessage" class="text-danger mt-2" style="display:none;"></div>
                    <br />
                    <div class="d-flex justify-content-between">
                        <button type="submit" class="btn btn-primary">Convert</button>
                        <button type="button" id="clearButton" class="btn btn-secondary">Clear</button>
                    </div>
                </form>

                @if (ViewData["ErrorMessage"] != null)
                {
                    <div class="alert alert-danger mt-3">
                        @ViewData["ErrorMessage"]
                    </div>
                }
            </section>
        </div>

        <div class="col-md-4 d-flex justify-content-center">
            @if (User.Identity.IsAuthenticated)
            {
                <section class="bg-custom-light p-4 rounded-custom shadow-custom">
                    <h3>Quick Access Favorites</h3>
                    <ul class="list-group scrollbar" id="Favorites">
                        @foreach (var favorite in favorites)
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                @favorite.BaseCurrency - @favorite.TargetCurrency
                                <button class="btn btn-primary btn-sm" onclick="setFavorite('@favorite.BaseCurrency', '@favorite.TargetCurrency')">
                                    <i class="fas fa-plus"></i>
                                </button>
                                <button class="btn btn-danger btn-sm" id="delete_@favorite.Id">
                                    <i class="fas fa-trash-alt"></i> 
                                </button>
                            </li>
                        }
                    </ul>
                </section>
            }
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            $('#convertedamountdiv').hide();
            attachDeleteHandlers();
            $('#currencyConverterForm').on('submit', function (e) {
                e.preventDefault();
                $('#SaveFavoriteHidden').val($('#SaveFavorite').is(':checked') ? 'true' : 'false');

                var form = $(this)[0];
                if (form.checkValidity() === false) {
                    e.stopPropagation();
                    $(this).addClass('was-validated');
                    return;
                }

                var amount = $('#Amount').val();
                var formData = $(this).serialize();
                $.ajax({
                    url: '@Url.Action("Convert", "CurrencyConverter")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.success) {
                            $('#ConvertedAmount').val(response.convertedAmount.toFixed(2));
                            $('#convertedamountdiv').show();
                            fetchFavorites();
                            setFormReadOnly(true);
                            if (response.errorMessage) {
                                $('#favoriteErrorMessage').text(response.errorMessage).show();
                            } else {
                                $('#favoriteErrorMessage').hide();
                            }
                        } else {
                            alert(response.errorMessage);
                            $('#ConvertedAmount').val('');
                        }
                    },
                    error: function () {
                        alert('An error occurred. Please try again.');
                        $('#ConvertedAmount').val('');
                    }
                });
            });

            function setFormReadOnly(isReadOnly) {
                $('#BaseCurrency, #TargetCurrency, #Amount, #SaveFavorite').prop('disabled', isReadOnly);
            }


            function updateFavoritesList(favorites) {
                var favoritesList = $('#Favorites');
                favoritesList.empty();

                $.each(favorites, function (index, favorite) {
                    favoritesList.append(
                        '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                        favorite.baseCurrency + ' - ' + favorite.targetCurrency +
                        '<button class="btn btn-primary btn-sm" onclick="setFavorite(\'' + favorite.baseCurrency + '\', \'' + favorite.targetCurrency + '\')">' + '<i class="fas fa-plus"></i>' +
                        '</button>' +
                        '<button id="delete_' + favorite.id + '" class="btn btn-danger btn-sm" >' +
                        '<i class="fas fa-trash-alt"></i> ' +
                        '</button>' +
                        '</li>'
                    );
                });
                attachDeleteHandlers();
            }

            function fetchFavorites() {
                $.ajax({
                    url: '@Url.Action("GetFavorites", "CurrencyConverter")',
                    type: 'GET',
                    success: function (response) {
                        if (response.success) {
                            updateFavoritesList(response.favorites);
                            attachDeleteHandlers();
                        } 
                    },
                    error: function (xhr, status, error) {
                        console.error('Failed to fetch favorites:', error);
                    }
                });
            }

            function attachDeleteHandlers() {
                $('button[id^="delete_"]').each(function () {
                    $(this).on('click', function (e) {
                        e.preventDefault();
                        var id = $(this).attr('id').replace('delete_', '');

                        Swal.fire({
                            title: 'Are you sure?',
                            text: 'This action cannot be undone.',
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, delete it!'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                $.ajax({
                                    url: '@Url.Action("DeleteFavorite", "CurrencyConverter")',
                                    type: 'POST',
                                    data: { id: id },
                                    success: function (response) {
                                        if (response.success) {
                                            fetchFavorites();
                                        } else {
                                            alert('Failed to delete favorite. Please try again.');
                                        }
                                    },
                                    error: function () {
                                        alert('An error occurred. Please try again.');
                                    }
                                });
                            }
                        });
                    });
                });
            }




            $('#clearButton').on('click', function () {
                $('#currencyConverterForm')[0].reset();
                $('#ConvertedAmount').val('');
                $('#SaveFavorite').prop('checked', false);
                $('#convertedamountdiv').hide();
                $('#currencyConverterForm').removeClass('was-validated');
                $('#favoriteErrorMessage').hide();
                setFormReadOnly(false);
            });

            $('#Amount, #BaseCurrency, #TargetCurrency').on('change', function () {
                var amount = $('#Amount').val();
                var baseCurrency = $('#BaseCurrency').val();
                var targetCurrency = $('#TargetCurrency').val();

                if (amount && baseCurrency && targetCurrency) {
                    $.ajax({
                        url: '@Url.Action("GetExchangeRate", "CurrencyConverter")',
                        type: 'GET',
                        data: { baseCurrency: baseCurrency, targetCurrency: targetCurrency },
                        success: function (response) {
                            if (response.error) {
                                $('#ConvertedAmount').val('Error');
                            } else {
                                var convertedAmount = amount * response.rate;
                                $('#ConvertedAmount').val(convertedAmount.toFixed(2));
                            }
                        }
                    });
                }
            });
            $('#SaveFavorite').on('change', function () {
                $('#SaveFavoriteHidden').val($(this).is(':checked') ? 'true' : 'false');
            });

            $('#historicalRatesForm').on('submit', function (e) {
                e.preventDefault();

                var date = $('#HistoricalDate').val();
                if (date) {
                    $.ajax({
                        url: '@Url.Action("HistoricalRates", "CurrencyConverter")',
                        type: 'GET',
                        data: { date: date },
                        success: function (response) {
                            var historicalRatesList = $('#historicalRatesList');
                            historicalRatesList.empty();

                            if (response) {
                                $.each(response, function (currency, rate) {
                                    historicalRatesList.append(
                                        '<li class="list-group-item d-flex justify-content-between align-items-center">' +
                                        currency + ' - ' + rate +
                                        '</li>'
                                    );
                                    $('#HistoricalDate').val('');
                                });
                            } else {
                                historicalRatesList.append(
                                    '<li class="list-group-item">No historical rates available for this date.</li>'
                                );
                            }
                        }
                    });
                }
            });
        });

        function setFavorite(baseCurrency, targetCurrency) {
            $('#BaseCurrency').val(baseCurrency).trigger('change');
            $('#TargetCurrency').val(targetCurrency).trigger('change');
        }
        document.addEventListener("DOMContentLoaded", function () {
            var today = new Date().toISOString().split('T')[0];
            document.getElementById("HistoricalDate").setAttribute('max', today);
        });
    </script>
    <partial name="_ValidationScriptsPartial" />
}
